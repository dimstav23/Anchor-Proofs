theory SecureLog 
begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing, multiset
functions: hmac/2

// Environment Setup
// Assumes that secure hardware counters, secure hmac and key exist
rule setup_environment:
    [ Fr(~key) ]
    --[ EnvironmentSetup(~key) ]->
    [ 
        !SecretKey(~key) // Part of logging layer
    ]

// Reveals the secret key
// Used to model a compromized key
rule reveal_key:
    [ !SecretKey(key) ] 
    --[ 
        KeyRevealed(key)    
    ]-> 
    [ Out(key) ]

// The hardware counter increases
// effectively attesting the current sw count
rule hw_count_increase:
    [ ]
    --[
        CountersAttested()
    ]->
    [ ]

// Write request for a PM object
// Affects the Anchor PM management engine
rule pm_object_write:
    [ Fr(~pm_object) ]
    --[
        PmObjectWrite(~pm_object)
    ]->
    [ 
        PmObjectWriteStage1(~pm_object)
    ]

// Send request for log counter increase
// From Anchor PM management engine to Trusted Counter Service
rule log_counter_increment_request:
    [ Fr(sw_ctr_var), PmObjectWriteStage1(pm_object) ]
    -->
    [ 
        TrustedChannel(<'log_counter_increment_request', sw_ctr_var>),
        PmObjectWriteStage2(pm_object, sw_ctr_var) 
    ]

// Log counter increase & reply message
// From Trusted Counter Service to Anchor PM management engine 
rule log_counter_increment_reply:
    [ TrustedChannel(<'log_counter_increment_request', sw_ctr_var>) ]
    --[ SWCount(sw_ctr_var) ]->
    [
        TrustedChannel(<'sw_count_increased', sw_ctr_var>),
        Out(sw_ctr_var)
    ]


// Receive Log counter & send information to logging layer
// From Anchor PM management engine to logging layer
rule send_pm_object_to_logging_layer:
    [ 
        TrustedChannel(<'sw_count_increased', sw_ctr_var>), 
        PmObjectWriteStage2(pm_object, sw_ctr_var) ]
    -->
    [
        TrustedChannel(<'append_to_log', pm_object, sw_ctr_var>) 
    ]

// Receive request to add object to log
// Happens in the logging layer
rule append_object_snapshot_entry:
    let
        enc_payload = senc{pm_object}key
        entry = <enc_payload, sw_count, hmac(<enc_payload, sw_count>, key)>
    in
    [ 
        TrustedChannel(<'append_to_log', pm_object, sw_count>),
        Fr(~log_id),
        !SecretKey(key)
    ]
    --[
        LogAppend(~log_id, entry)
    ]->
    [
        Out(~log_id), Out(entry),
        TrustedChannel(<'stabilized', pm_object, sw_count>)
    ]

// Receive stabilization confirmation
rule stabilization_point:
    [ 
        TrustedChannel(<'stabilized', pm_object, sw_ctr_var>)
    ]
    --[
        Stabilized(pm_object)
    ]->
    [ ]

// Rule representing attacker capabilities
// Delete an arbitrary log entry
rule atk_remove_log:
    [ In(log_id) ]
    --[
        LogRemove(log_id)
    ]->
    []

// Rule representing attacker capabilities
// Add arbitrary log enrty
rule atk_add_log:
    [ Fr(~log_id), In(entry) ]
    --[
        LogAppend(~log_id, entry)
    ]->
    [ Out(~log_id) ]

// Rule representing the verification of the log structure
rule verify_log:
    [ !SecretKey(key) ]
    --[
        _restrict(
            All #attest.
                CountersAttested() @ #attest
            ==>
            ( 
                (   /* For all sw_counts that are smaller than the currently attested one */
                    All sw_count #sw_inc.
                        #sw_inc < #attest & SWCount(sw_count) @ #sw_inc
                    ==>
                    (   /* There is a unique valid log entry */
                        Ex log_id pm_obj #j.
                            /* Entry is valid */
                            LogAppend(log_id, <senc{pm_obj}key, sw_count, 
                                    hmac(<senc{pm_obj}key, sw_count>, key)>) @ #j
                            & 
                            /* Entry has not been deleted */
                            not (Ex #d. LogRemove(log_id) @ #d)
                            &
                            /* Entry is unique */
                            (
                                All id2 p2 h2 #k.
                                    LogAppend(id2, <p2, sw_count, h2>) @ #k
                                ==>
                                    id2 = log_id
                            )
                    )
                )
            )
        ),
        VerifiedLog()
    ]->
    [  ]

// For simplicity, we restrict the log to entries that have a valid format
// As invalid entries always cause the verification process to fail
restriction only_valid_formatted_log_entries:
"
    All log_id entry key #j #k.
        LogAppend(log_id, entry) @ #j
        & EnvironmentSetup(key) @ #k
    ==>
    ( 
        (
            Ex pm_obj sw_count. 
                entry =  <senc{pm_obj}key, sw_count,
                            hmac(<senc{pm_obj}key, sw_count>, key)>
        )
    )
"

// Control lemma
// Indicates that there is some log that is considered verified
lemma log_can_be_verified:
    exists-trace
    "   
        not (Ex k #i. KeyRevealed(k) @ #i)
        &
        Ex #i. 
            VerifiedLog() @ #i
            &
            ( Ex id entry #j #k. 
                #j < #k & #k < #i 
                & LogAppend(id, entry) @ #j
                & CountersAttested() @ #k
            )
    "

/* Proof the following property:

Assuming the secret key was not revealed prior to the verification, it holds that:

Every PM object that was stabilized before the last hardware counter increase 
that happened before the verification process, was appended to the
log in a valid format and has not been removed from the log before 
the verification took place. (nothing is missing)
*/
lemma verified_log_is_complete:
    "   
        (Ex k #i. KeyRevealed(k) @ #i)
        |
        All #verif_point #hw_count pm_obj #stbl_point.
            #stbl_point < #hw_count & #hw_count < #verif_point
            & Stabilized(pm_obj) @ #stbl_point
            & CountersAttested() @ #hw_count
            & VerifiedLog() @ #verif_point
        ==>
        (
            Ex log_id sw_count key #j.
                LogAppend(log_id, <senc{pm_obj}key, sw_count, hmac(<senc{pm_obj}key, sw_count>, key)>) @ #j
                & not (Ex #d. #d < #verif_point & LogRemove(log_id) @ #d)
        )
    "


/* Proof the following property:

Assuming the secret key was not revealed prior to the verification, it holds that:

Every log entry belonging to a counter from before the last hardware counter increase 
that happened before the verification process, is either a valid entry or deleted 
before the verification took place. (no entries are invalid)
*/
lemma verified_log_contains_only_valid_pm_objects:
    "   
        (Ex k #i. KeyRevealed(k) @ #i)
        |
        (
            All #verif_point #hw_count log_id entry #entry_added.
                #entry_added < #hw_count & #hw_count < #verif_point
                & LogAppend(log_id, entry) @ #entry_added
                & CountersAttested() @ #hw_count
                & VerifiedLog() @ #verif_point
            ==>
            (   
                (
                    Ex pm_obj key sw_count #w.
                    (
                        entry = <senc{pm_obj}key, sw_count,hmac(<senc{pm_obj}key, sw_count>, key)>
                        &
                        #w < #entry_added & PmObjectWrite(pm_obj) @ #w
                    )
                )
                |
                ( Ex #d. #d < #verif_point & LogRemove(log_id) @ #d)
            )
        )
    "

end
